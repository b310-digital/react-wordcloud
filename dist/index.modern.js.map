{"version":3,"file":"index.modern.js","sources":["../src/optimized-d3-cloud.js","../src/utils.js","../src/layout.js","../src/index.js","../src/hooks.js"],"sourcesContent":["// @ts-nocheck\n/**\n * Author: Augustinas (https://github.com/WhoAteDaCake)\n * Source: https://github.com/chrisrzhou/react-wordcloud/blob/166d0b0400a87647fe4e7855a26fe581ce38a502/src/cloud.ts\n * TEMPORARY workaround\n *\n * Implements the wordcloud algorithm based on: https://github.com/jasondavies/d3-cloud/tree/v1.2.5\n * Improvements:\n *  Use a setTimeout + batch sizes to calculate clouds in order to avoid blocking main thread for two long (87-101)\n *\n */\n\n// Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/\n// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf\n\nimport { dispatch } from 'd3-dispatch';\n\nconst cloudRadians = Math.PI / 180,\n  cw = (1 << 11) >> 5,\n  ch = 1 << 11;\n\nexport default function Cloud() {\n  let size = [256, 256],\n    text = cloudText,\n    font = cloudFont,\n    fontSize = cloudFontSize,\n    fontStyle = cloudFontNormal,\n    fontWeight = cloudFontNormal,\n    rotate = cloudRotate,\n    padding = cloudPadding,\n    spiral = archimedeanSpiral,\n    words = [],\n    timeInterval = Infinity,\n    event = dispatch('word', 'end'),\n    timer = null,\n    random = Math.random,\n    cloud = {},\n    canvas = cloudCanvas;\n\n  let killed = false;\n\n  cloud.canvas = function(_) {\n    return arguments.length ? ((canvas = functor(_)), cloud) : canvas;\n  };\n\n  cloud.start = function() {\n    let contextAndRatio = getContext(canvas()),\n      board = zeroArray((size[0] >> 5) * size[1]),\n      bounds = null,\n      n = words.length,\n      i = -1,\n      tags = [],\n      data = words\n        .map(function(d, i) {\n          d.text = text.call(this, d, i);\n          d.font = font.call(this, d, i);\n          d.style = fontStyle.call(this, d, i);\n          d.weight = fontWeight.call(this, d, i);\n          d.rotate = rotate.call(this, d, i);\n          d.size = ~~fontSize.call(this, d, i);\n          d.padding = padding.call(this, d, i);\n          return d;\n        })\n        .sort(function(a, b) {\n          return b.size - a.size;\n        });\n\n    // Added by react-wordcloud\n    // Allows to calculate a subset of data instead of all of the words at once\n    function multiStep(from, to) {\n      for (let i = from; i < to; i += 1) {\n        const d = data[i];\n        d.x = (size[0] * (random() + 0.5)) >> 1;\n        d.y = (size[1] * (random() + 0.5)) >> 1;\n        cloudSprite(contextAndRatio, d, data, i);\n        if (d.hasText && place(board, d, bounds)) {\n          tags.push(d);\n          event.call('word', cloud, d);\n          if (bounds) cloudBounds(bounds, d);\n          else\n            bounds = [\n              { x: d.x + d.x0, y: d.y + d.y0 },\n              { x: d.x + d.x1, y: d.y + d.y1 },\n            ];\n          // Temporary hack\n          d.x -= size[0] >> 1;\n          d.y -= size[1] >> 1;\n        }\n      }\n    }\n\n    // Added by react-wordcloud\n    // Iterates dataset using setTimeout in order to prevent blocking of the main thread\n    function loop(i) {\n      const step = 50;\n      const from = i * step;\n      const to = Math.min((i + 1) * step, words.length);\n      multiStep(from, to);\n      if (killed) {\n        return;\n      }\n      if (to < words.length) {\n        setTimeout(() => loop(i + 1), 0);\n      } else {\n        cloud.stop();\n        event.call('end', cloud, tags, bounds);\n      }\n    }\n    setTimeout(() => loop(0), 0);\n\n    return cloud;\n  };\n\n  cloud.revive = () => {\n    killed = false;\n    return cloud;\n  };\n\n  cloud.stop = function() {\n    if (timer) {\n      clearInterval(timer);\n      timer = null;\n    }\n    killed = true;\n    return cloud;\n  };\n\n  function getContext(canvas) {\n    canvas.width = canvas.height = 1;\n    const ratio = Math.sqrt(\n      canvas.getContext('2d').getImageData(0, 0, 1, 1).data.length >> 2,\n    );\n    canvas.width = (cw << 5) / ratio;\n    canvas.height = ch / ratio;\n\n    const context = canvas.getContext('2d');\n    context.fillStyle = context.strokeStyle = 'red';\n    context.textAlign = 'center';\n\n    return { context: context, ratio: ratio };\n  }\n\n  function place(board, tag, bounds) {\n    let perimeter = [{ x: 0, y: 0 }, { x: size[0], y: size[1] }],\n      startX = tag.x,\n      startY = tag.y,\n      maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),\n      s = spiral(size),\n      dt = random() < 0.5 ? 1 : -1,\n      t = -dt,\n      dxdy,\n      dx,\n      dy;\n\n    while ((dxdy = s((t += dt)))) {\n      dx = ~~dxdy[0];\n      dy = ~~dxdy[1];\n\n      if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;\n\n      tag.x = startX + dx;\n      tag.y = startY + dy;\n\n      if (\n        tag.x + tag.x0 < 0 ||\n        tag.y + tag.y0 < 0 ||\n        tag.x + tag.x1 > size[0] ||\n        tag.y + tag.y1 > size[1]\n      )\n        continue;\n      // TODO only check for collisions within current bounds.\n      if (!bounds || !cloudCollide(tag, board, size[0])) {\n        if (!bounds || collideRects(tag, bounds)) {\n          var sprite = tag.sprite,\n            w = tag.width >> 5,\n            sw = size[0] >> 5,\n            lx = tag.x - (w << 4),\n            sx = lx & 0x7f,\n            msx = 32 - sx,\n            h = tag.y1 - tag.y0,\n            x = (tag.y + tag.y0) * sw + (lx >> 5),\n            last;\n          for (let j = 0; j < h; j++) {\n            last = 0;\n            for (let i = 0; i <= w; i++) {\n              board[x + i] |=\n                (last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);\n            }\n            x += sw;\n          }\n          delete tag.sprite;\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  cloud.timeInterval = function(_) {\n    return arguments.length\n      ? ((timeInterval = _ == null ? Infinity : _), cloud)\n      : timeInterval;\n  };\n\n  cloud.words = function(_) {\n    return arguments.length ? ((words = _), cloud) : words;\n  };\n\n  cloud.size = function(_) {\n    return arguments.length ? ((size = [+_[0], +_[1]]), cloud) : size;\n  };\n\n  cloud.font = function(_) {\n    return arguments.length ? ((font = functor(_)), cloud) : font;\n  };\n\n  cloud.fontStyle = function(_) {\n    return arguments.length ? ((fontStyle = functor(_)), cloud) : fontStyle;\n  };\n\n  cloud.fontWeight = function(_) {\n    return arguments.length ? ((fontWeight = functor(_)), cloud) : fontWeight;\n  };\n\n  cloud.rotate = function(_) {\n    return arguments.length ? ((rotate = functor(_)), cloud) : rotate;\n  };\n\n  cloud.text = function(_) {\n    return arguments.length ? ((text = functor(_)), cloud) : text;\n  };\n\n  cloud.spiral = function(_) {\n    return arguments.length ? ((spiral = spirals[_] || _), cloud) : spiral;\n  };\n\n  cloud.fontSize = function(_) {\n    return arguments.length ? ((fontSize = functor(_)), cloud) : fontSize;\n  };\n\n  cloud.padding = function(_) {\n    return arguments.length ? ((padding = functor(_)), cloud) : padding;\n  };\n\n  cloud.random = function(_) {\n    return arguments.length ? ((random = _), cloud) : random;\n  };\n\n  cloud.on = function() {\n    const value = event.on.apply(event, arguments);\n    return value === event ? cloud : value;\n  };\n\n  return cloud;\n}\n\nfunction cloudText(d) {\n  return d.text;\n}\n\nfunction cloudFont() {\n  return 'serif';\n}\n\nfunction cloudFontNormal() {\n  return 'normal';\n}\n\nfunction cloudFontSize(d) {\n  return Math.sqrt(d.value);\n}\n\nfunction cloudRotate() {\n  return (~~(Math.random() * 6) - 3) * 30;\n}\n\nfunction cloudPadding() {\n  return 1;\n}\n\n// Fetches a monochrome sprite bitmap for the specified text.\n// Load in batches for speed.\nfunction cloudSprite(contextAndRatio, d, data, di) {\n  if (d.sprite) return;\n  const c = contextAndRatio.context,\n    ratio = contextAndRatio.ratio;\n\n  c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);\n  let x = 0,\n    y = 0,\n    maxh = 0,\n    n = data.length;\n  --di;\n  while (++di < n) {\n    d = data[di];\n    c.save();\n    c.font =\n      d.style +\n      ' ' +\n      d.weight +\n      ' ' +\n      ~~((d.size + 1) / ratio) +\n      'px ' +\n      d.font;\n    var w = c.measureText(d.text + 'm').width * ratio,\n      h = d.size << 1;\n    if (d.rotate) {\n      const sr = Math.sin(d.rotate * cloudRadians),\n        cr = Math.cos(d.rotate * cloudRadians),\n        wcr = w * cr,\n        wsr = w * sr,\n        hcr = h * cr,\n        hsr = h * sr;\n      w =\n        ((Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f) >> 5) << 5;\n      h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));\n    } else {\n      w = ((w + 0x1f) >> 5) << 5;\n    }\n    if (h > maxh) maxh = h;\n    if (x + w >= cw << 5) {\n      x = 0;\n      y += maxh;\n      maxh = 0;\n    }\n    if (y + h >= ch) break;\n    c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);\n    if (d.rotate) c.rotate(d.rotate * cloudRadians);\n    c.fillText(d.text, 0, 0);\n\n    if (d.padding) {\n      c.lineWidth = 2 * d.padding;\n      c.strokeText(d.text, 0, 0);\n    }\n    c.restore();\n    d.width = w;\n    d.height = h;\n    d.xoff = x;\n    d.yoff = y;\n    d.x1 = w >> 1;\n    d.y1 = h >> 1;\n    d.x0 = -d.x1;\n    d.y0 = -d.y1;\n    d.hasText = true;\n    x += w;\n  }\n  const pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,\n    sprite = [];\n  while (--di >= 0) {\n    d = data[di];\n    if (!d.hasText) continue;\n    var w = d.width,\n      w32 = w >> 5,\n      h = d.y1 - d.y0;\n    // Zero the buffer\n    for (var i = 0; i < h * w32; i++) sprite[i] = 0;\n    x = d.xoff;\n    if (x == null) return;\n    y = d.yoff;\n    let seen = 0,\n      seenRow = -1;\n    for (let j = 0; j < h; j++) {\n      for (var i = 0; i < w; i++) {\n        const k = w32 * j + (i >> 5),\n          m = pixels[((y + j) * (cw << 5) + (x + i)) << 2]\n            ? 1 << (31 - (i % 32))\n            : 0;\n        sprite[k] |= m;\n        seen |= m;\n      }\n      if (seen) seenRow = j;\n      else {\n        d.y0++;\n        h--;\n        j--;\n        y++;\n      }\n    }\n    d.y1 = d.y0 + seenRow;\n    d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);\n  }\n}\n\n// Use mask-based collision detection.\nfunction cloudCollide(tag, board, sw) {\n  sw >>= 5;\n  let sprite = tag.sprite,\n    w = tag.width >> 5,\n    lx = tag.x - (w << 4),\n    sx = lx & 0x7f,\n    msx = 32 - sx,\n    h = tag.y1 - tag.y0,\n    x = (tag.y + tag.y0) * sw + (lx >> 5),\n    last;\n  for (let j = 0; j < h; j++) {\n    last = 0;\n    for (let i = 0; i <= w; i++) {\n      if (\n        ((last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) &\n        board[x + i]\n      )\n        return true;\n    }\n    x += sw;\n  }\n  return false;\n}\n\nfunction cloudBounds(bounds, d) {\n  const b0 = bounds[0],\n    b1 = bounds[1];\n  if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;\n  if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;\n  if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;\n  if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;\n}\n\nfunction collideRects(a, b) {\n  return (\n    a.x + a.x1 > b[0].x &&\n    a.x + a.x0 < b[1].x &&\n    a.y + a.y1 > b[0].y &&\n    a.y + a.y0 < b[1].y\n  );\n}\n\nfunction archimedeanSpiral(size) {\n  const e = size[0] / size[1];\n  return function(t) {\n    return [e * (t *= 0.1) * Math.cos(t), t * Math.sin(t)];\n  };\n}\n\nfunction rectangularSpiral(size) {\n  let dy = 4,\n    dx = (dy * size[0]) / size[1],\n    x = 0,\n    y = 0;\n  return function(t) {\n    const sign = t < 0 ? -1 : 1;\n    // See triangular numbers: T_n = n * (n + 1) / 2.\n    switch ((Math.sqrt(1 + 4 * sign * t) - sign) & 3) {\n      case 0:\n        x += dx;\n        break;\n      case 1:\n        y += dy;\n        break;\n      case 2:\n        x -= dx;\n        break;\n      default:\n        y -= dy;\n        break;\n    }\n    return [x, y];\n  };\n}\n\nfunction zeroArray(n) {\n  const a = new Uint32Array(n);\n  return a;\n}\n\nfunction cloudCanvas() {\n  return document.createElement('canvas');\n}\n\nfunction functor(d) {\n  return typeof d === 'function'\n    ? d\n    : function() {\n        return d;\n      };\n}\n\nvar spirals = {\n  archimedean: archimedeanSpiral,\n  rectangular: rectangularSpiral,\n};\n","import { max, min, range } from 'd3-array';\nimport { scaleLinear, scaleLog, scaleOrdinal, scaleSqrt } from 'd3-scale';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\n\nexport function choose(array, random) {\n  return array[Math.floor(random() * array.length)];\n}\n\nexport function getDefaultColors() {\n  return range(20)\n    .map(number => number.toString())\n    .map(scaleOrdinal(schemeCategory10));\n}\n\nexport function getFontScale(words, fontSizes, scale) {\n  const minSize = min(words, word => Number(word.value));\n  const maxSize = max(words, word => Number(word.value));\n  let scaleFunction;\n  switch (scale) {\n    case 'log':\n      scaleFunction = scaleLog;\n      break;\n    case 'sqrt':\n      scaleFunction = scaleSqrt;\n      break;\n    case 'linear':\n    default:\n      scaleFunction = scaleLinear;\n      break;\n  }\n\n  const fontScale = scaleFunction()\n    .domain([minSize, maxSize])\n    .range(fontSizes);\n  return fontScale;\n}\n\nexport function getFontSize(word) {\n  return `${word.size}px`;\n}\n\nexport function getText(word) {\n  return word.text;\n}\n\nexport function getTransform(word) {\n  const translate = `translate(${word.x}, ${word.y})`;\n  const rotate =\n    typeof word.rotate === 'number' ? `rotate(${word.rotate})` : '';\n  return translate + rotate;\n}\n\nexport function rotate(rotations, rotationAngles, random) {\n  if (rotations < 1) {\n    return 0;\n  }\n\n  let angles = [];\n  if (rotations === 1) {\n    angles = [rotationAngles[0]];\n  } else {\n    angles = [...rotationAngles];\n    const increment = (rotationAngles[1] - rotationAngles[0]) / (rotations - 1);\n    let angle = rotationAngles[0] + increment;\n    while (angle < rotationAngles[1]) {\n      angles.push(angle);\n      angle += increment;\n    }\n  }\n\n  return choose(angles, random);\n}\n","import 'd3-transition';\n\nimport { descending } from 'd3-array';\nimport d3Cloud from 'd3-cloud';\nimport { event } from 'd3-selection';\nimport clonedeep from 'lodash.clonedeep';\nimport seedrandom from 'seedrandom';\nimport tippy from 'tippy.js';\n\nimport optimizedD3Cloud from './optimized-d3-cloud';\nimport {\n  choose,\n  getFontScale,\n  getFontSize,\n  getText,\n  getTransform,\n  rotate,\n} from './utils';\n\nexport function render({ callbacks, options, random, selection, words }) {\n  const {\n    getWordColor,\n    getWordTooltip,\n    onWordClick,\n    onWordMouseOver,\n    onWordMouseOut,\n  } = callbacks;\n  const {\n    colors,\n    enableTooltip,\n    fontStyle,\n    fontWeight,\n    textAttributes,\n    tooltipOptions,\n  } = options;\n  const { fontFamily, transitionDuration } = options;\n\n  function getFill(word) {\n    return getWordColor ? getWordColor(word) : choose(colors, random);\n  }\n\n  // Load words\n  let tooltipInstance;\n  const vizWords = selection.selectAll('text').data(words);\n  vizWords.join(\n    enter => {\n      let text = enter\n        .append('text')\n        .on('click', word => {\n          if (onWordClick) {\n            onWordClick(word, event);\n          }\n        })\n        .on('mouseover', word => {\n          if (\n            enableTooltip &&\n            (!tooltipInstance || tooltipInstance.isDestroyed)\n          ) {\n            tooltipInstance = tippy(event.target, {\n              animation: 'scale',\n              arrow: true,\n              content: () => getWordTooltip(word),\n              onHidden: (instance) => {\n                instance.destroy();\n                tooltipInstance = null;\n              },\n              ...tooltipOptions,\n            });\n          }\n\n          if (onWordMouseOver) {\n            onWordMouseOver(word, event);\n          }\n        })\n        .on('mouseout', word => {\n          if (tooltipInstance && !tooltipInstance.state.isVisible) {\n            tooltipInstance.destroy();\n          }\n\n          if (onWordMouseOut) {\n            onWordMouseOut(word, event);\n          }\n        })\n        .attr('cursor', onWordClick ? 'pointer' : 'default')\n        .attr('fill', getFill)\n        .attr('font-family', fontFamily)\n        .attr('font-style', fontStyle)\n        .attr('font-weight', fontWeight)\n        .attr('text-anchor', 'middle')\n        .attr('transform', 'translate(0, 0) rotate(0)');\n\n      if (typeof textAttributes === 'object') {\n        Object.keys(textAttributes).forEach(key => {\n          text = text.attr(key, textAttributes[key]);\n        });\n      }\n\n      text = text.call(enter =>\n        enter\n          .transition()\n          .duration(transitionDuration)\n          .attr('font-size', getFontSize)\n          .attr('transform', getTransform)\n          .text(getText),\n      );\n    },\n    update => {\n      update\n        .transition()\n        .duration(transitionDuration)\n        .attr('fill', getFill)\n        .attr('font-family', fontFamily)\n        .attr('font-size', getFontSize)\n        .attr('transform', getTransform)\n        .text(getText);\n    },\n    exit => {\n      exit\n        .transition()\n        .duration(transitionDuration)\n        .attr('fill-opacity', 0)\n        .remove();\n    },\n  );\n}\n\nexport function layout({\n  callbacks,\n  maxWords,\n  options,\n  selection,\n  size,\n  words,\n}) {\n  const MAX_LAYOUT_ATTEMPTS = 10;\n  const SHRINK_FACTOR = 0.95;\n  const {\n    deterministic,\n    enableOptimizations,\n    fontFamily,\n    fontStyle,\n    fontSizes,\n    fontWeight,\n    padding,\n    randomSeed,\n    rotations,\n    rotationAngles,\n    spiral,\n    scale,\n  } = options;\n\n  const sortedWords = words\n    .concat()\n    .sort((x, y) => descending(x.value, y.value))\n    .slice(0, maxWords);\n\n  const random = seedrandom(\n    deterministic ? randomSeed || 'deterministic' : null,\n  );\n\n  let cloud;\n  if (enableOptimizations) {\n    cloud = optimizedD3Cloud();\n  } else {\n    cloud = d3Cloud();\n  }\n\n  cloud\n    .size(size)\n    // @ts-ignore\n    .padding(padding)\n    .words(clonedeep(sortedWords))\n    .rotate(() => {\n      if (rotations === undefined) {\n        // Default rotation algorithm\n        return (~~(random() * 6) - 3) * 30;\n      }\n\n      return rotate(rotations, rotationAngles, random);\n    })\n    .spiral(spiral)\n    .random(random)\n    .text(getText)\n    .font(fontFamily)\n    .fontStyle(fontStyle)\n    .fontWeight(fontWeight);\n\n  function draw(fontSizes, attempts = 1) {\n    if (enableOptimizations) {\n      cloud.revive();\n    }\n\n    cloud\n      .fontSize(word => {\n        const fontScale = getFontScale(sortedWords, fontSizes, scale);\n        return fontScale(word.value);\n      })\n      .on('end', computedWords => {\n        /** KNOWN ISSUE: https://github.com/jasondavies/d3-cloud/issues/36\n         * Recursively layout and decrease font-sizes by a SHRINK_FACTOR.\n         * Bail out with a warning message after MAX_LAYOUT_ATTEMPTS.\n         */\n        if (\n          sortedWords.length !== computedWords.length &&\n          attempts <= MAX_LAYOUT_ATTEMPTS\n        ) {\n          if (attempts === MAX_LAYOUT_ATTEMPTS) {\n            console.warn(\n              `Unable to layout ${sortedWords.length -\n                computedWords.length} word(s) after ${attempts} attempts.  Consider: (1) Increasing the container/component size. (2) Lowering the max font size. (3) Limiting the rotation angles.`,\n            );\n          }\n\n          const minFontSize = Math.max(fontSizes[0] * SHRINK_FACTOR, 1);\n          const maxFontSize = Math.max(\n            fontSizes[1] * SHRINK_FACTOR,\n            minFontSize,\n          );\n\n          draw([minFontSize, maxFontSize], attempts + 1);\n        } else {\n          render({\n            callbacks,\n            options,\n            random,\n            selection,\n            words: computedWords,\n          });\n        }\n      })\n      .start();\n  }\n\n  draw(fontSizes);\n}\n","import debounce from 'lodash.debounce';\nimport React, { useEffect, useRef } from 'react';\n\nimport { useResponsiveSvgSelection } from './hooks';\nimport { layout } from './layout';\nimport { getDefaultColors } from './utils';\n\nexport const defaultCallbacks = {\n  getWordTooltip: ({ text, value }) => `${text} (${value})`,\n};\n\nexport const defaultOptions = {\n  colors: getDefaultColors(),\n  deterministic: false,\n  enableOptimizations: false,\n  enableTooltip: true,\n  fontFamily: 'times new roman',\n  fontSizes: [4, 32],\n  fontStyle: 'normal',\n  fontWeight: 'normal',\n  padding: 1,\n  rotationAngles: [-90, 90],\n  scale: 'sqrt',\n  spiral: 'rectangular',\n  tooltipOptions: {},\n  transitionDuration: 600,\n};\n\nfunction ReactWordCloud({\n  callbacks,\n  maxWords = 100,\n  minSize,\n  options,\n  size: initialSize,\n  words,\n  ...rest\n}) {\n  const [ref, selection, size] = useResponsiveSvgSelection(\n    minSize,\n    initialSize,\n    options.svgAttributes,\n  );\n\n  const render = useRef(debounce(layout, 100));\n\n  useEffect(() => {\n    if (selection) {\n      const mergedCallbacks = { ...defaultCallbacks, ...callbacks };\n      const mergedOptions = { ...defaultOptions, ...options };\n\n      render.current({\n        callbacks: mergedCallbacks,\n        maxWords,\n        options: mergedOptions,\n        selection,\n        size,\n        words,\n      });\n    }\n  }, [maxWords, callbacks, options, selection, size, words]);\n\n  return <div ref={ref} style={{ height: '100%', width: '100%' }} {...rest} />;\n}\n\nReactWordCloud.defaultProps = {\n  callbacks: defaultCallbacks,\n  maxWords: 100,\n  minSize: [300, 300],\n  options: defaultOptions,\n};\n\nexport default ReactWordCloud;\n","import { select } from 'd3-selection';\nimport { useEffect, useRef, useState } from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nexport function useResponsiveSvgSelection(minSize, initialSize, svgAttributes) {\n  const elementRef = useRef();\n  const [size, setSize] = useState(initialSize);\n  const [selection, setSelection] = useState(null);\n\n  useEffect(() => {\n    const element = elementRef.current;\n\n    // Set svg selection\n    let svg = select(element)\n      .append('svg')\n      .style('display', 'block'); // Native inline svg leaves undesired white space\n\n    if (typeof svgAttributes === 'object') {\n      Object.keys(svgAttributes).forEach(key => {\n        svg = svg.attr(key, svgAttributes[key]);\n      });\n    }\n\n    const selection = svg.append('g');\n    setSelection(selection);\n\n    function updateSize(width, height) {\n      svg.attr('height', height).attr('width', width);\n      selection.attr('transform', `translate(${width / 2}, ${height / 2})`);\n      setSize([width, height]);\n    }\n\n    let width = 0;\n    let height = 0;\n    if (initialSize === undefined) {\n      // Use parentNode size if resized has not occurred\n      width = element.parentElement.offsetWidth;\n      height = element.parentElement.offsetHeight;\n    } else {\n      // Use initialSize if it is provided\n      [width, height] = initialSize;\n    }\n\n    width = Math.max(width, minSize[0]);\n    height = Math.max(height, minSize[1]);\n    updateSize(width, height);\n\n    // Update resize using a resize observer\n    const resizeObserver = new ResizeObserver(entries => {\n      if (!entries || entries.length === 0) {\n        return;\n      }\n\n      if (initialSize === undefined) {\n        const { width, height } = entries[0].contentRect;\n        updateSize(width, height);\n      }\n    });\n    resizeObserver.observe(element);\n\n    // Cleanup\n    return () => {\n      resizeObserver.unobserve(element);\n      select(element)\n        .selectAll('*')\n        .remove();\n    };\n  }, [initialSize, minSize, svgAttributes]);\n\n  return [elementRef, selection, size];\n}\n"],"names":["Math","PI","d","text","sqrt","value","random","contextAndRatio","data","di","sprite","context","ratio","c","clearRect","y","maxh","n","length","save","font","style","weight","size","measureText","width","h","rotate","sin","cloudRadians","cr","cos","wcr","w","wsr","sr","hcr","hsr","max","abs","x","cw","translate","fillText","padding","lineWidth","strokeText","restore","height","xoff","yoff","x1","y1","x0","y0","hasText","getImageData","w32","i","seenRow","j","m","pixels","seen","slice","tag","board","sw","last","lx","sx","msx","bounds","b1","b0","t","e","createElement","archimedean","archimedeanSpiral","rectangular","dx","sign","array","floor","word","callbacks","maxWords","options","selection","words","deterministic","enableOptimizations","fontFamily","fontStyle","fontSizes","fontWeight","randomSeed","rotations","rotationAngles","spiral","scale","concat","sort","descending","seedrandom","cloud","cloudText","cloudFont","fontSize","cloudFontSize","cloudFontNormal","cloudRotate","cloudPadding","timeInterval","Infinity","event","dispatch","canvas","cloudCanvas","dxdy","dy","startX","startY","maxDelta","s","dt","min","cloudCollide","a","b","_","functor","start","getContext","fillStyle","strokeStyle","textAlign","tags","map","call","this","setTimeout","from","to","cloudSprite","place","push","cloudBounds","multiStep","killed","loop","stop","revive","spirals","on","apply","arguments","optimizedD3Cloud","d3Cloud","clonedeep","sortedWords","undefined","angles","increment","angle","getText","attempts","Number","scaleFunction","scaleLog","scaleSqrt","scaleLinear","domain","minSize","maxSize","range","getFontScale","computedWords","console","warn","draw","minFontSize","getWordColor","getWordTooltip","onWordClick","onWordMouseOver","onWordMouseOut","colors","enableTooltip","textAttributes","tooltipOptions","transitionDuration","choose","selectAll","join","enter","append","tooltipInstance","isDestroyed","tippy","target","animation","arrow","content","onHidden","instance","destroy","state","isVisible","attr","getFill","Object","keys","forEach","key","transition","duration","getFontSize","getTransform","update","exit","remove","render","number","toString","scaleOrdinal","schemeCategory10","initialSize","rest","ref","svgAttributes","useRef","setSize","useState","setSelection","useEffect","elementRef","current","select","element","svg","parentElement","offsetWidth","offsetHeight","updateSize","entries","contentRect","resizeObserver","observe","unobserve","useResponsiveSvgSelection","debounce","layout","defaultCallbacks","defaultOptions","mergedCallbacks","mergedOptions","React","ReactWordCloud","defaultProps"],"mappings":"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"}